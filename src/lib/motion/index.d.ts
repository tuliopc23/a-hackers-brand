import type { Action } from 'svelte/action';
export type MagneticHoverOptions = { enabled?: boolean; strength?: number; scale?: number; distance?: number };
export declare const magneticHover: Action<HTMLElement, MagneticHoverOptions | undefined>;
export type JellyHoverOptions = { enabled?: boolean; intensity?: number; speed?: number; duration?: number; scale?: number; borderRadius?: string };
export declare const jellyHover: Action<HTMLElement, JellyHoverOptions | undefined>;
export type LiquidBlurOptions = { amount?: number; duration?: number; blur?: 'sm'|'md'|'lg'|'xl'; opacity?: 'light'|'subtle'|'medium'|'strong'; scale?: number; intensity?: 'low'|'medium'|'high' };
export declare const liquidBlur: Action<HTMLElement, LiquidBlurOptions | undefined>;
export type SpringPopParams = { duration?: number; delay?: number; bounce?: boolean; scale?: number };
export declare function springPop(node: Element, params?: SpringPopParams): { duration: number; delay: number; css: (t: number) => string };
export type GlassFadeParams = { duration?: number; delay?: number; direction?: 'up'|'down'|'center'; distance?: number; opacity?: 'light'|'subtle'|'medium'|'strong' };
export declare function glassFade(node: Element, params?: GlassFadeParams): { duration: number; delay: number; css: (t: number) => string };
export declare const breathing: Action<HTMLElement, { enabled?: boolean; intensity?: number; speed?: number } | undefined>;
export declare const liquidResponsive: typeof jellyHover;
