export const extractSchemaProperties = (schema) => {
    if (!schema) {
        return [];
    }
    const properties = [];
    const requiredFields = new Set(schema.required || []);
    for (const [key, value] of Object.entries(schema)) {
        const name = key;
        if (name === 'required' || name.includes('x-parser')) {
            continue;
        }
        if (name === 'oneOf' || name === 'anyOf' || name === 'allOf') {
            const descriptions = {
                oneOf: 'Must be one of these types',
                anyOf: 'Can be any of these types',
                allOf: 'Must contain all of these types',
            };
            const prop = {
                name,
                type: name,
                description: descriptions[name],
                properties: value
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    .map((item) => {
                    const schemaWithRequired = Object.assign(Object.assign({}, (item.properties || item)), { required: item.required });
                    const extracted = extractSchemaProperties(schemaWithRequired);
                    return extracted;
                })
                    .flat(),
            };
            properties.push(prop);
            continue;
        }
        if (value === null || value === undefined) {
            continue;
        }
        if (typeof value === 'object' && !Array.isArray(value)) {
            const keys = Object.keys(value);
            if ('type' in value || keys.some((key) => /^x-.*type$/.test(key))) {
                const typeKey = 'type' in value ? 'type' : keys.find((key) => /^x-.*type$/.test(key));
                const prop = {
                    name: name,
                    type: value[typeKey],
                    description: value.description || value['const'],
                    deprecated: value.deprecated,
                    required: requiredFields.has(name),
                };
                if (value.properties) {
                    prop.properties = extractSchemaProperties(value.properties);
                }
                properties.push(prop);
            }
            else {
                properties.push(...extractSchemaProperties(value));
            }
        }
        else {
            properties.push({
                name,
                type: Array.isArray(value) ? 'array' : typeof value,
                description: typeof value === 'string' ? value : undefined,
                required: requiredFields.has(name),
            });
        }
    }
    return properties;
};
