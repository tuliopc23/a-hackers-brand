export declare const HstButton: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        color?: "flat" | "default" | "primary";
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, HTMLButtonElement, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        color?: "flat" | "default" | "primary";
    }> & Readonly<{}>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    color?: "flat" | "default" | "primary";
}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?: (props: {}) => any;
    };
});
export declare const HstButtonGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        title?: string;
        modelValue?: string;
        options: string[] | number[] | import("./types").HstControlOption[] | Record<string, string | number>;
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: string) => any;
    }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        title?: string;
        modelValue?: string;
        options: string[] | number[] | import("./types").HstControlOption[] | Record<string, string | number>;
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: string) => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: string;
    modelValue?: string;
    options: string[] | number[] | import("./types").HstControlOption[] | Record<string, string | number>;
}> & Readonly<{
    "onUpdate:modelValue"?: (value: string) => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    "update:modelValue": (value: string) => any;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const HstCheckbox: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        modelValue?: (boolean | "true" | "false") | null;
        title?: string;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: boolean | "true" | "false") => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: boolean | "true" | "false") => void;
    }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        modelValue?: (boolean | "true" | "false") | null;
        title?: string;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: boolean | "true" | "false") => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    modelValue?: (boolean | "true" | "false") | null;
    title?: string;
}> & Readonly<{
    "onUpdate:modelValue"?: (newValue: boolean | "true" | "false") => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (newValue: boolean | "true" | "false") => void;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const HstCheckboxList: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        title?: string;
        modelValue: Array<string>;
        options: string[] | import("./types").HstControlOption[];
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: string[]) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: string[]) => any;
    }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        title?: string;
        modelValue: Array<string>;
        options: string[] | import("./types").HstControlOption[];
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: string[]) => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: string;
    modelValue: Array<string>;
    options: string[] | import("./types").HstControlOption[];
}> & Readonly<{
    "onUpdate:modelValue"?: (value: string[]) => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    "update:modelValue": (value: string[]) => any;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const HstText: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        title?: string;
        modelValue?: string | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: string) => void;
    }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {
        input: (typeof __VLS_nativeElements)["input"];
    }, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        title?: string;
        modelValue?: string | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: string) => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: string;
    modelValue?: string | null;
}> & Readonly<{
    "onUpdate:modelValue"?: (newValue: string) => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (newValue: string) => void;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const HstNumber: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        title?: string;
        modelValue?: number | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: number) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: number) => void;
    }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {
        input: (typeof __VLS_nativeElements)["input"];
    }, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        title?: string;
        modelValue?: number | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: number) => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: string;
    modelValue?: number | null;
}> & Readonly<{
    "onUpdate:modelValue"?: (newValue: number) => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (newValue: number) => void;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const HstSlider: import("vue").DefineComponent<{
    title?: string;
    modelValue?: number | null;
    min: number;
    max: number;
}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (newValue: number) => void;
}, string, import("vue").PublicProps, Readonly<{
    title?: string;
    modelValue?: number | null;
    min: number;
    max: number;
}> & Readonly<{
    "onUpdate:modelValue"?: (newValue: number) => any;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {
    input: (typeof __VLS_nativeElements)["input"];
}, any>;
export declare const HstTextarea: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        title?: string;
        modelValue?: string | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: string) => void;
    }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {
        input: (typeof __VLS_nativeElements)["textarea"];
    }, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        title?: string;
        modelValue?: string | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: string) => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: string;
    modelValue?: string | null;
}> & Readonly<{
    "onUpdate:modelValue"?: (newValue: string) => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (newValue: string) => void;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const HstSelect: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        title?: string;
        modelValue?: any;
        options: Record<string, any> | string[] | import("./types").HstControlOption[];
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: any) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: any) => any;
    }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        title?: string;
        modelValue?: any;
        options: Record<string, any> | string[] | import("./types").HstControlOption[];
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: any) => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: string;
    modelValue?: any;
    options: Record<string, any> | string[] | import("./types").HstControlOption[];
}> & Readonly<{
    "onUpdate:modelValue"?: (value: any) => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    "update:modelValue": (value: any) => any;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const HstColorShades: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        shades: Record<string, any>;
        getName?: (key: string, color: string) => string;
        search?: string;
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        shades: Record<string, any>;
        getName?: (key: string, color: string) => string;
        search?: string;
    }> & Readonly<{}>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    shades: Record<string, any>;
    getName?: (key: string, color: string) => string;
    search?: string;
}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?: (props: {
            color: string;
        }) => any;
    };
});
export declare const HstTokenList: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        tokens: Record<string, string | number | any[] | Record<string, any>>;
        getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        tokens: Record<string, string | number | any[] | Record<string, any>>;
        getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
    }> & Readonly<{}>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    tokens: Record<string, string | number | any[] | Record<string, any>>;
    getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?: (props: {
            token: {
                key: string;
                name: string;
                value: string | any[] | Record<string, any>;
            };
        }) => any;
    };
});
export declare const HstTokenGrid: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        tokens: Record<string, string | number | any[] | Record<string, any>>;
        colSize?: number;
        getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
        getName: (key: string, value: string | number | any[] | Record<string, any>) => string;
        colSize: number;
    }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, HTMLDivElement, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        tokens: Record<string, string | number | any[] | Record<string, any>>;
        colSize?: number;
        getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        getName: (key: string, value: string | number | any[] | Record<string, any>) => string;
        colSize: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    tokens: Record<string, string | number | any[] | Record<string, any>>;
    colSize?: number;
    getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    getName: (key: string, value: string | number | any[] | Record<string, any>) => string;
    colSize: number;
}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?: (props: {
            token: {
                key: string;
                name: string;
                value: string | any[] | Record<string, any>;
            };
        }) => any;
    };
});
export declare const HstCopyIcon: import("vue").DefineComponent<{
    content: string | (() => import("@histoire/shared").Awaitable<string>);
}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
    content: string | (() => import("@histoire/shared").Awaitable<string>);
}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
export declare const HstRadio: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        title?: string;
        modelValue?: string | null;
        options: import("./types").HstControlOption[];
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: string) => any;
    }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        title?: string;
        modelValue?: string | null;
        options: import("./types").HstControlOption[];
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: string) => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: string;
    modelValue?: string | null;
    options: import("./types").HstControlOption[];
}> & Readonly<{
    "onUpdate:modelValue"?: (value: string) => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    "update:modelValue": (value: string) => any;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const HstJson: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        title?: string;
        modelValue: unknown;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: unknown) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: unknown) => void;
    }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {
        editorElement: (typeof __VLS_nativeElements)["div"];
    }, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        title?: string;
        modelValue: unknown;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: unknown) => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: string;
    modelValue: unknown;
}> & Readonly<{
    "onUpdate:modelValue"?: (newValue: unknown) => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (newValue: unknown) => void;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const HstColorSelect: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
        title?: string;
        modelValue?: string | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: string) => void;
    }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        title?: string;
        modelValue?: string | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: string) => any;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title?: string;
    modelValue?: string | null;
}> & Readonly<{
    "onUpdate:modelValue"?: (newValue: string) => any;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (newValue: string) => void;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        actions?: (props: {}) => any;
    };
});
export declare const components: {
    HstButton: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            color?: "flat" | "default" | "primary";
        }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, HTMLButtonElement, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            color?: "flat" | "default" | "primary";
        }> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        color?: "flat" | "default" | "primary";
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            default?: (props: {}) => any;
        };
    });
    HstButtonGroup: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            modelValue?: string;
            options: string[] | number[] | import("./types").HstControlOption[] | Record<string, string | number>;
        }> & Readonly<{
            "onUpdate:modelValue"?: (value: string) => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
            "update:modelValue": (value: string) => any;
        }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            modelValue?: string;
            options: string[] | number[] | import("./types").HstControlOption[] | Record<string, string | number>;
        }> & Readonly<{
            "onUpdate:modelValue"?: (value: string) => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        title?: string;
        modelValue?: string;
        options: string[] | number[] | import("./types").HstControlOption[] | Record<string, string | number>;
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: string) => any;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
    HstCheckbox: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            modelValue?: (boolean | "true" | "false") | null;
            title?: string;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: boolean | "true" | "false") => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:modelValue": (newValue: boolean | "true" | "false") => void;
        }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            modelValue?: (boolean | "true" | "false") | null;
            title?: string;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: boolean | "true" | "false") => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        modelValue?: (boolean | "true" | "false") | null;
        title?: string;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: boolean | "true" | "false") => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: boolean | "true" | "false") => void;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
    HstCheckboxList: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            modelValue: Array<string>;
            options: string[] | import("./types").HstControlOption[];
        }> & Readonly<{
            "onUpdate:modelValue"?: (value: string[]) => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
            "update:modelValue": (value: string[]) => any;
        }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            modelValue: Array<string>;
            options: string[] | import("./types").HstControlOption[];
        }> & Readonly<{
            "onUpdate:modelValue"?: (value: string[]) => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        title?: string;
        modelValue: Array<string>;
        options: string[] | import("./types").HstControlOption[];
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: string[]) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: string[]) => any;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
    HstText: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            modelValue?: string | null;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: string) => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:modelValue": (newValue: string) => void;
        }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {
            input: (typeof __VLS_nativeElements)["input"];
        }, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            modelValue?: string | null;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: string) => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        title?: string;
        modelValue?: string | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: string) => void;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
    HstNumber: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            modelValue?: number | null;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: number) => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:modelValue": (newValue: number) => void;
        }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {
            input: (typeof __VLS_nativeElements)["input"];
        }, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            modelValue?: number | null;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: number) => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        title?: string;
        modelValue?: number | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: number) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: number) => void;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
    HstSlider: import("vue").DefineComponent<{
        title?: string;
        modelValue?: number | null;
        min: number;
        max: number;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: number) => void;
    }, string, import("vue").PublicProps, Readonly<{
        title?: string;
        modelValue?: number | null;
        min: number;
        max: number;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: number) => any;
    }>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {
        input: (typeof __VLS_nativeElements)["input"];
    }, any>;
    HstTextarea: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            modelValue?: string | null;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: string) => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:modelValue": (newValue: string) => void;
        }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {
            input: (typeof __VLS_nativeElements)["textarea"];
        }, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            modelValue?: string | null;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: string) => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        title?: string;
        modelValue?: string | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: string) => void;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
    HstSelect: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            modelValue?: any;
            options: Record<string, any> | string[] | import("./types").HstControlOption[];
        }> & Readonly<{
            "onUpdate:modelValue"?: (value: any) => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
            "update:modelValue": (value: any) => any;
        }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            modelValue?: any;
            options: Record<string, any> | string[] | import("./types").HstControlOption[];
        }> & Readonly<{
            "onUpdate:modelValue"?: (value: any) => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        title?: string;
        modelValue?: any;
        options: Record<string, any> | string[] | import("./types").HstControlOption[];
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: any) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: any) => any;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
    HstRadio: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            modelValue?: string | null;
            options: import("./types").HstControlOption[];
        }> & Readonly<{
            "onUpdate:modelValue"?: (value: string) => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
            "update:modelValue": (value: string) => any;
        }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            modelValue?: string | null;
            options: import("./types").HstControlOption[];
        }> & Readonly<{
            "onUpdate:modelValue"?: (value: string) => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        title?: string;
        modelValue?: string | null;
        options: import("./types").HstControlOption[];
    }> & Readonly<{
        "onUpdate:modelValue"?: (value: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: string) => any;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
    HstJson: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            modelValue: unknown;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: unknown) => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:modelValue": (newValue: unknown) => void;
        }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {
            editorElement: (typeof __VLS_nativeElements)["div"];
        }, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            modelValue: unknown;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: unknown) => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        title?: string;
        modelValue: unknown;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: unknown) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: unknown) => void;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
    HstColorShades: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            shades: Record<string, any>;
            getName?: (key: string, color: string) => string;
            search?: string;
        }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            shades: Record<string, any>;
            getName?: (key: string, color: string) => string;
            search?: string;
        }> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        shades: Record<string, any>;
        getName?: (key: string, color: string) => string;
        search?: string;
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            default?: (props: {
                color: string;
            }) => any;
        };
    });
    HstTokenList: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            tokens: Record<string, string | number | any[] | Record<string, any>>;
            getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
        }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            tokens: Record<string, string | number | any[] | Record<string, any>>;
            getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
        }> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        tokens: Record<string, string | number | any[] | Record<string, any>>;
        getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            default?: (props: {
                token: {
                    key: string;
                    name: string;
                    value: string | any[] | Record<string, any>;
                };
            }) => any;
        };
    });
    HstTokenGrid: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            tokens: Record<string, string | number | any[] | Record<string, any>>;
            colSize?: number;
            getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
        }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
            getName: (key: string, value: string | number | any[] | Record<string, any>) => string;
            colSize: number;
        }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, HTMLDivElement, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            tokens: Record<string, string | number | any[] | Record<string, any>>;
            colSize?: number;
            getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
        }> & Readonly<{}>, {}, {}, {}, {}, {
            getName: (key: string, value: string | number | any[] | Record<string, any>) => string;
            colSize: number;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        tokens: Record<string, string | number | any[] | Record<string, any>>;
        colSize?: number;
        getName?: (key: string, value: string | number | any[] | Record<string, any>) => string;
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
        getName: (key: string, value: string | number | any[] | Record<string, any>) => string;
        colSize: number;
    }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            default?: (props: {
                token: {
                    key: string;
                    name: string;
                    value: string | any[] | Record<string, any>;
                };
            }) => any;
        };
    });
    HstCopyIcon: import("vue").DefineComponent<{
        content: string | (() => import("@histoire/shared").Awaitable<string>);
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
        content: string | (() => import("@histoire/shared").Awaitable<string>);
    }> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
    HstColorSelect: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            modelValue?: string | null;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: string) => any;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:modelValue": (newValue: string) => void;
        }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            modelValue?: string | null;
        }> & Readonly<{
            "onUpdate:modelValue"?: (newValue: string) => any;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        title?: string;
        modelValue?: string | null;
    }> & Readonly<{
        "onUpdate:modelValue"?: (newValue: string) => any;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (newValue: string) => void;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            actions?: (props: {}) => any;
        };
    });
};
export * from './types';
