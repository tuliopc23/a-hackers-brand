import CC from 'camera-controls';
export { default as CameraControlsRef } from 'camera-controls';
declare const CameraControls: import("svelte").Component<import("@threlte/core/dist/components/T/types").AnyProps & import("@threlte/core/dist/components/T/types").RefProps<CC> & import("@threlte/core/dist/components/T/types").BaseProps<CC, [{
    ref: CC;
}]> & {
    args?: never;
} & {
    makeDefault?: never;
    manual?: never;
} & Partial<Omit<{
    minPolarAngle?: number | undefined;
    maxPolarAngle?: number | undefined;
    minAzimuthAngle?: number | undefined;
    maxAzimuthAngle?: number | undefined;
    minDistance?: number | undefined;
    maxDistance?: number | undefined;
    infinityDolly?: boolean | undefined;
    minZoom?: number | undefined;
    maxZoom?: number | undefined;
    smoothTime?: number | undefined;
    draggingSmoothTime?: number | undefined;
    maxSpeed?: number | undefined;
    azimuthRotateSpeed?: number | undefined;
    polarRotateSpeed?: number | undefined;
    dollySpeed?: number | undefined;
    dollyDragInverted?: boolean | undefined;
    truckSpeed?: number | undefined;
    dollyToCursor?: boolean | undefined;
    dragToOffset?: boolean | undefined;
    boundaryFriction?: number | undefined;
    restThreshold?: number | undefined;
    colliderMeshes?: import("three").Object3D[] | undefined;
    mouseButtons?: import("camera-controls/dist/types").MouseButtons | undefined;
    touches?: import("camera-controls/dist/types").Touches | undefined;
    cancel?: undefined;
    lockPointer?: undefined;
    unlockPointer?: undefined;
    verticalDragToForward?: boolean | undefined;
    camera?: import("three").PerspectiveCamera | import("three").OrthographicCamera | undefined;
    enabled?: boolean | undefined;
    readonly active?: boolean | undefined;
    readonly currentAction?: number | undefined;
    distance?: number | undefined;
    azimuthAngle?: number | undefined;
    polarAngle?: number | undefined;
    boundaryEnclosesCamera?: boolean | undefined;
    interactiveArea?: DOMRect | {
        x: number;
        y: number;
        width: number;
        height: number;
    } | undefined;
    addEventListener?: undefined;
    removeEventListener?: undefined;
    rotate?: undefined;
    rotateAzimuthTo?: undefined;
    rotatePolarTo?: undefined;
    rotateTo?: undefined;
    dolly?: undefined;
    dollyTo?: undefined;
    dollyInFixed?: undefined;
    zoom?: undefined;
    zoomTo?: undefined;
    pan?: undefined;
    truck?: undefined;
    forward?: undefined;
    elevate?: undefined;
    moveTo?: undefined;
    lookInDirectionOf?: undefined;
    fitToBox?: undefined;
    fitToSphere?: undefined;
    setLookAt?: undefined;
    lerpLookAt?: undefined;
    setPosition?: undefined;
    setTarget?: undefined;
    setFocalOffset?: undefined;
    setOrbitPoint?: undefined;
    setBoundary?: undefined;
    setViewport?: undefined;
    getDistanceToFitBox?: undefined;
    getDistanceToFitSphere?: undefined;
    getTarget?: undefined;
    getPosition?: undefined;
    getSpherical?: undefined;
    getFocalOffset?: undefined;
    normalizeRotations?: undefined;
    stop?: undefined;
    reset?: undefined;
    saveState?: undefined;
    updateCameraUp?: undefined;
    applyCameraUp?: undefined;
    update?: undefined;
    toJSON?: undefined;
    fromJSON?: undefined;
    connect?: undefined;
    disconnect?: undefined;
    dispose?: undefined;
    dampingFactor?: number | undefined;
    draggingDampingFactor?: number | undefined;
    hasEventListener?: undefined;
    removeAllEventListeners?: undefined;
    dispatchEvent?: undefined;
}, import("@threlte/core/dist/components/T/types").OmittedPropKeys | ("stop" | "toJSON" | "dispose" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "cancel" | "reset" | "forward" | "lockPointer" | "unlockPointer" | "rotate" | "rotateAzimuthTo" | "rotatePolarTo" | "rotateTo" | "dolly" | "dollyTo" | "dollyInFixed" | "zoom" | "zoomTo" | "pan" | "truck" | "elevate" | "moveTo" | "lookInDirectionOf" | "fitToBox" | "fitToSphere" | "setLookAt" | "lerpLookAt" | "setPosition" | "setTarget" | "setFocalOffset" | "setOrbitPoint" | "setBoundary" | "setViewport" | "getDistanceToFitBox" | "getDistanceToFitSphere" | "getTarget" | "getPosition" | "getSpherical" | "getFocalOffset" | "normalizeRotations" | "saveState" | "updateCameraUp" | "applyCameraUp" | "update" | "fromJSON" | "connect" | "disconnect" | "removeAllEventListeners")>> & {
    ontransitionstart?: ((event: {
        type: "transitionstart";
    } | {
        type: "rest";
    } | {
        type: "update";
    } | {
        type: "wake";
    } | {
        type: "sleep";
    } | {
        type: "controlstart";
    } | {
        type: "control";
    } | {
        type: "controlend";
    }) => void) | undefined;
    onrest?: ((event: {
        type: "transitionstart";
    } | {
        type: "rest";
    } | {
        type: "update";
    } | {
        type: "wake";
    } | {
        type: "sleep";
    } | {
        type: "controlstart";
    } | {
        type: "control";
    } | {
        type: "controlend";
    }) => void) | undefined;
    onupdate?: ((event: {
        type: "transitionstart";
    } | {
        type: "rest";
    } | {
        type: "update";
    } | {
        type: "wake";
    } | {
        type: "sleep";
    } | {
        type: "controlstart";
    } | {
        type: "control";
    } | {
        type: "controlend";
    }) => void) | undefined;
    onwake?: ((event: {
        type: "transitionstart";
    } | {
        type: "rest";
    } | {
        type: "update";
    } | {
        type: "wake";
    } | {
        type: "sleep";
    } | {
        type: "controlstart";
    } | {
        type: "control";
    } | {
        type: "controlend";
    }) => void) | undefined;
    onsleep?: ((event: {
        type: "transitionstart";
    } | {
        type: "rest";
    } | {
        type: "update";
    } | {
        type: "wake";
    } | {
        type: "sleep";
    } | {
        type: "controlstart";
    } | {
        type: "control";
    } | {
        type: "controlend";
    }) => void) | undefined;
    oncontrolstart?: ((event: {
        type: "transitionstart";
    } | {
        type: "rest";
    } | {
        type: "update";
    } | {
        type: "wake";
    } | {
        type: "sleep";
    } | {
        type: "controlstart";
    } | {
        type: "control";
    } | {
        type: "controlend";
    }) => void) | undefined;
    oncontrol?: ((event: {
        type: "transitionstart";
    } | {
        type: "rest";
    } | {
        type: "update";
    } | {
        type: "wake";
    } | {
        type: "sleep";
    } | {
        type: "controlstart";
    } | {
        type: "control";
    } | {
        type: "controlend";
    }) => void) | undefined;
    oncontrolend?: ((event: {
        type: "transitionstart";
    } | {
        type: "rest";
    } | {
        type: "update";
    } | {
        type: "wake";
    } | {
        type: "sleep";
    } | {
        type: "controlstart";
    } | {
        type: "control";
    } | {
        type: "controlend";
    }) => void) | undefined;
} & Threlte.UserProps & {
    ref?: CC;
}, {}, "ref">;
export default CameraControls;
